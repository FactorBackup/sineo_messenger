import { Platform } from '@ionic/angular';
import { File } from '@ionic-native/file/ngx';
import { InAppBrowser as InAppBrowser$1 } from '@ionic-native/in-app-browser/ngx/index';
import { File as File$1 } from '@ionic-native/file/ngx/index';
import { Injectable, NgModule, defineInjectable, inject } from '@angular/core';
import { InAppBrowser } from '@ionic-native/in-app-browser/ngx';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/iamport.payment.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class IamportPayment {
    /**
     * @param {?} response
     */
    constructor(response) {
        this.success = response.success;
        this.status = response.status;
        this.response = response;
    }
    /**
     * @return {?}
     */
    isSuccess() {
        return this.success;
    }
    /**
     * @return {?}
     */
    getStatus() {
        return this.status;
    }
    /**
     * @return {?}
     */
    getResponse() {
        return this.response;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/iamport.certification.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class IamportCertification {
    /**
     * @param {?} response
     */
    constructor(response) {
        this.success = response.success;
        this.impUid = response.imp_uid;
        this.merchantUid = response.merchant_uid;
    }
    /**
     * @return {?}
     */
    isSuccess() {
        return this.success;
    }
    /**
     * @return {?}
     */
    getImpUid() {
        return this.impUid;
    }
    /**
     * @return {?}
     */
    getMerchantUid() {
        return this.merchantUid;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/iamport-ionic4-kcp.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class IamportService {
    /**
     * @param {?} platform
     * @param {?} inAppBrowser
     * @param {?} file
     */
    constructor(platform, inAppBrowser, file) {
        this.platform = platform;
        this.inAppBrowser = inAppBrowser;
        this.file = file;
    }
    /**
     * @private
     * @param {?} query
     * @return {?}
     */
    static parseQuery(query) {
        /** @type {?} */
        let obj = {};
        /** @type {?} */
        let arr = query.split('&');
        for (let element of arr) {
            /** @type {?} */
            const pair = element.split("=");
            /** @type {?} */
            const key = decodeURIComponent(pair[0]);
            /** @type {?} */
            const val = decodeURIComponent(pair[1]);
            if (key === "imp_success") {
                obj["success"] = ("true" === val); //string 을 boolean 으로
            }
            else {
                obj[key] = val;
            }
        }
        return obj;
    }
    /**
     * @param {?} userCode
     * @param {?} param
     * @return {?}
     */
    payment(userCode, param) {
        /** @type {?} */
        const promise = new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.platform.ready().then((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                let paymentUrl = '/_iamport_file_/www/iamport-checkout.html?user-code=' + userCode;
                if (this.platform.is('ios')) {
                    paymentUrl = this.file.applicationDirectory + 'www/iamport-checkout-ios.html?user-code=' + userCode;
                }
                /** @type {?} */
                const redirectUrl = "http://localhost/iamport";
                /** @type {?} */
                const browser = this.inAppBrowser.create(paymentUrl, '_blank', 'location=no');
                /** @type {?} */
                let paymentProgress = false;
                param.m_redirect_url = redirectUrl;
                browser.on("loadstart")
                    .subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    if (e.url.startsWith(redirectUrl)) {
                        /** @type {?} */
                        const query = e.url.substring(redirectUrl.length + 1);
                        /** @type {?} */
                        const data = IamportService.parseQuery(query);
                        resolve(new IamportPayment(data));
                        browser.close();
                    }
                }));
                browser.on("loadstop")
                    .subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    if (!paymentProgress && (e.url).indexOf(paymentUrl) > -1) {
                        paymentProgress = true;
                        /** @type {?} */
                        const inlineCallback = `(rsp) => {
                                                        if( rsp.success ) {
                                                            location.href = '${redirectUrl}?imp_success=true&imp_uid='+rsp.imp_uid+'&merchant_uid='+rsp.merchant_uid+'&vbank_num='+rsp.vbank_num+'&vbank_name='+rsp.vbank_name;
                                                        } else {
                                                            location.href = '${redirectUrl}?imp_success=false&imp_uid='+rsp.imp_uid+'&merchant_uid='+rsp.merchant_uid+'&error_msg='+rsp.error_msg;
                                                        }
                                                   }`;
                        /** @type {?} */
                        const iamport_script = `IMP.request_pay(${JSON.stringify(param)}, ${inlineCallback})`;
                        browser.executeScript({
                            code: iamport_script
                        });
                    }
                }), (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                }));
                browser.on("exit")
                    .subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    reject("사용자가 결제를 취소하였습니다.");
                }));
                browser.show();
            }));
        }));
        return promise;
    }
    /**
     * @param {?} userCode
     * @param {?} param
     * @return {?}
     */
    certification(userCode, param) {
        /** @type {?} */
        const promise = new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.platform.ready().then((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                let certificationUrl = '/_iamport_file_/www/iamport-checkout.html?user-code=' + userCode;
                if (this.platform.is('ios')) {
                    certificationUrl = this.file.applicationDirectory + 'www/iamport-checkout-ios.html?user-code=' + userCode;
                }
                /** @type {?} */
                const redirectUrl = "http://localhost/iamport-certification";
                /** @type {?} */
                const browser = this.inAppBrowser.create(certificationUrl, '_blank', 'location=no');
                /** @type {?} */
                let certificationProgress = false;
                browser.on("loadstart")
                    .subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    if (e.url.startsWith(redirectUrl)) {
                        /** @type {?} */
                        const query = e.url.substring(redirectUrl.length + 1);
                        /** @type {?} */
                        const data = IamportService.parseQuery(query);
                        resolve(new IamportCertification(data));
                        browser.close();
                    }
                }));
                browser.on("loadstop")
                    .subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    if (!certificationProgress && (e.url).indexOf(certificationUrl) > -1) {
                        certificationProgress = true;
                        /** @type {?} */
                        const inlineCallback = `(rsp) => {
                                                        if( rsp.success ) {
                                                            location.href = '${redirectUrl}?imp_success=true&imp_uid='+rsp.imp_uid+'&merchant_uid='+rsp.merchant_uid;
                                                        } else {
                                                            location.href = '${redirectUrl}?imp_success=false&imp_uid='+rsp.imp_uid+'&merchant_uid='+rsp.merchant_uid;
                                                        }
                                                   }`;
                        /** @type {?} */
                        const iamport_script = `IMP.certification(${JSON.stringify(param)}, ${inlineCallback})`;
                        browser.executeScript({
                            code: iamport_script
                        });
                    }
                }), (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                }));
                browser.on("exit")
                    .subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    reject("사용자가 본인인증을 취소하였습니다.");
                }));
                browser.show();
            }));
        }));
        return promise;
    }
}
IamportService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
IamportService.ctorParameters = () => [
    { type: Platform },
    { type: InAppBrowser },
    { type: File }
];
/** @nocollapse */ IamportService.ngInjectableDef = defineInjectable({ factory: function IamportService_Factory() { return new IamportService(inject(Platform), inject(InAppBrowser$1), inject(File$1)); }, token: IamportService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * Generated from: lib/iamport-ionic4-kcp.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class IamportIonic4KcpModule {
}
IamportIonic4KcpModule.decorators = [
    { type: NgModule, args: [{
                declarations: [],
                imports: [],
                providers: [
                    InAppBrowser
                ],
                exports: []
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: iamport-ionic4-kcp.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { IamportService, IamportIonic4KcpModule };

//# sourceMappingURL=iamport-ionic4-kcp.js.map