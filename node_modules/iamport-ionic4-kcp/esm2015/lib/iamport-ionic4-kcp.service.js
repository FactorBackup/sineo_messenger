/**
 * @fileoverview added by tsickle
 * Generated from: lib/iamport-ionic4-kcp.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { IamportPayment } from "./iamport.payment";
import { IamportCertification } from "./iamport.certification";
import { Platform } from "@ionic/angular";
import { File } from "@ionic-native/file/ngx";
import { InAppBrowser } from "@ionic-native/in-app-browser/ngx";
import * as i0 from "@angular/core";
import * as i1 from "@ionic/angular";
import * as i2 from "@ionic-native/in-app-browser/ngx/index";
import * as i3 from "@ionic-native/file/ngx/index";
export class IamportService {
    /**
     * @param {?} platform
     * @param {?} inAppBrowser
     * @param {?} file
     */
    constructor(platform, inAppBrowser, file) {
        this.platform = platform;
        this.inAppBrowser = inAppBrowser;
        this.file = file;
    }
    /**
     * @private
     * @param {?} query
     * @return {?}
     */
    static parseQuery(query) {
        /** @type {?} */
        let obj = {};
        /** @type {?} */
        let arr = query.split('&');
        for (let element of arr) {
            /** @type {?} */
            const pair = element.split("=");
            /** @type {?} */
            const key = decodeURIComponent(pair[0]);
            /** @type {?} */
            const val = decodeURIComponent(pair[1]);
            if (key === "imp_success") {
                obj["success"] = ("true" === val); //string 을 boolean 으로
            }
            else {
                obj[key] = val;
            }
        }
        return obj;
    }
    /**
     * @param {?} userCode
     * @param {?} param
     * @return {?}
     */
    payment(userCode, param) {
        /** @type {?} */
        const promise = new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.platform.ready().then((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                let paymentUrl = '/_iamport_file_/www/iamport-checkout.html?user-code=' + userCode;
                if (this.platform.is('ios')) {
                    paymentUrl = this.file.applicationDirectory + 'www/iamport-checkout-ios.html?user-code=' + userCode;
                }
                /** @type {?} */
                const redirectUrl = "http://localhost/iamport";
                /** @type {?} */
                const browser = this.inAppBrowser.create(paymentUrl, '_blank', 'location=no');
                /** @type {?} */
                let paymentProgress = false;
                param.m_redirect_url = redirectUrl;
                browser.on("loadstart")
                    .subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    if (e.url.startsWith(redirectUrl)) {
                        /** @type {?} */
                        const query = e.url.substring(redirectUrl.length + 1);
                        /** @type {?} */
                        const data = IamportService.parseQuery(query);
                        resolve(new IamportPayment(data));
                        browser.close();
                    }
                }));
                browser.on("loadstop")
                    .subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    if (!paymentProgress && (e.url).indexOf(paymentUrl) > -1) {
                        paymentProgress = true;
                        /** @type {?} */
                        const inlineCallback = `(rsp) => {
                                                        if( rsp.success ) {
                                                            location.href = '${redirectUrl}?imp_success=true&imp_uid='+rsp.imp_uid+'&merchant_uid='+rsp.merchant_uid+'&vbank_num='+rsp.vbank_num+'&vbank_name='+rsp.vbank_name;
                                                        } else {
                                                            location.href = '${redirectUrl}?imp_success=false&imp_uid='+rsp.imp_uid+'&merchant_uid='+rsp.merchant_uid+'&error_msg='+rsp.error_msg;
                                                        }
                                                   }`;
                        /** @type {?} */
                        const iamport_script = `IMP.request_pay(${JSON.stringify(param)}, ${inlineCallback})`;
                        browser.executeScript({
                            code: iamport_script
                        });
                    }
                }), (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                }));
                browser.on("exit")
                    .subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    reject("사용자가 결제를 취소하였습니다.");
                }));
                browser.show();
            }));
        }));
        return promise;
    }
    /**
     * @param {?} userCode
     * @param {?} param
     * @return {?}
     */
    certification(userCode, param) {
        /** @type {?} */
        const promise = new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.platform.ready().then((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                let certificationUrl = '/_iamport_file_/www/iamport-checkout.html?user-code=' + userCode;
                if (this.platform.is('ios')) {
                    certificationUrl = this.file.applicationDirectory + 'www/iamport-checkout-ios.html?user-code=' + userCode;
                }
                /** @type {?} */
                const redirectUrl = "http://localhost/iamport-certification";
                /** @type {?} */
                const browser = this.inAppBrowser.create(certificationUrl, '_blank', 'location=no');
                /** @type {?} */
                let certificationProgress = false;
                browser.on("loadstart")
                    .subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    if (e.url.startsWith(redirectUrl)) {
                        /** @type {?} */
                        const query = e.url.substring(redirectUrl.length + 1);
                        /** @type {?} */
                        const data = IamportService.parseQuery(query);
                        resolve(new IamportCertification(data));
                        browser.close();
                    }
                }));
                browser.on("loadstop")
                    .subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    if (!certificationProgress && (e.url).indexOf(certificationUrl) > -1) {
                        certificationProgress = true;
                        /** @type {?} */
                        const inlineCallback = `(rsp) => {
                                                        if( rsp.success ) {
                                                            location.href = '${redirectUrl}?imp_success=true&imp_uid='+rsp.imp_uid+'&merchant_uid='+rsp.merchant_uid;
                                                        } else {
                                                            location.href = '${redirectUrl}?imp_success=false&imp_uid='+rsp.imp_uid+'&merchant_uid='+rsp.merchant_uid;
                                                        }
                                                   }`;
                        /** @type {?} */
                        const iamport_script = `IMP.certification(${JSON.stringify(param)}, ${inlineCallback})`;
                        browser.executeScript({
                            code: iamport_script
                        });
                    }
                }), (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                }));
                browser.on("exit")
                    .subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    reject("사용자가 본인인증을 취소하였습니다.");
                }));
                browser.show();
            }));
        }));
        return promise;
    }
}
IamportService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
IamportService.ctorParameters = () => [
    { type: Platform },
    { type: InAppBrowser },
    { type: File }
];
/** @nocollapse */ IamportService.ngInjectableDef = i0.defineInjectable({ factory: function IamportService_Factory() { return new IamportService(i0.inject(i1.Platform), i0.inject(i2.InAppBrowser), i0.inject(i3.File)); }, token: IamportService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    IamportService.prototype.platform;
    /**
     * @type {?}
     * @private
     */
    IamportService.prototype.inAppBrowser;
    /**
     * @type {?}
     * @private
     */
    IamportService.prototype.file;
}
//# sourceMappingURL=data:application/json;base64,