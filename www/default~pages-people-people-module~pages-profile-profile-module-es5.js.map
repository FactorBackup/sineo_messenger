{"version":3,"sources":["./src/pages/messages/services/messages/messages.service.ts","./src/pages/people/services/people/people.service.ts"],"names":[],"mappings":"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","file":"default~pages-people-people-module~pages-profile-profile-module-es5.js","sourcesContent":["import { Injectable, Injector } from '@angular/core';\r\nimport * as firebase from 'firebase/app';\r\nimport { combineLatest, Observable, of } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { IUser } from 'src/pages/auth/helpers/model';\r\nimport { AuthService } from 'src/pages/auth/services/auth/auth.service';\r\nimport { Extender } from 'src/shared/helpers/extender';\r\nimport { FirestoreService } from 'src/shared/services/firestore/firestore.service';\r\nimport { IChat, IMessage } from '../../models/message';\r\n\r\n/**\r\n * crud methods to interact with firebase cloud store regarding messaging\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MessagesService extends Extender {\r\n  constructor(protected injector: Injector, private authService: AuthService, private firestoreService: FirestoreService) {\r\n    super(injector);\r\n  }\r\n\r\n  /** get messages that contain the users uid in participantsId property, check if message is flagged as archived\r\n   * for each message get messages recipient and get their details from users collection. return data\r\n   */\r\n  public getMessages(uid: string, archieved: boolean = false): Observable<IMessage[]> {\r\n    return this.firestoreService\r\n      .colWithIds$<IMessage[]>('messages', (ref: any) =>\r\n        ref.where('participantsId', 'array-contains', uid).where('isArchieved', '==', archieved)\r\n      )\r\n      .pipe(\r\n        switchMap((data: IMessage[]) => {\r\n          const reads$ = [];\r\n          if (data.length > 0) {\r\n            data.forEach((msg) => {\r\n              reads$.push(this.getMessage(msg.id));\r\n            });\r\n            return combineLatest(reads$);\r\n          } else {\r\n            return of([]);\r\n          }\r\n        }),\r\n        map((data: IMessage[]) => {\r\n          return data;\r\n        })\r\n      );\r\n  }\r\n\r\n  /** get message and their participants information */\r\n  public getMessage(id: string | number): Observable<IMessage> {\r\n    let data: any;\r\n    const reads$ = [];\r\n\r\n    return this.firestoreService.doc$<IMessage>(`messages/${id}`).pipe(\r\n      switchMap((msg) => {\r\n        data = msg;\r\n        msg.participantsId.forEach((i: any) => {\r\n          reads$.push(this.firestoreService.doc$<IUser>(`users/${i}`));\r\n        });\r\n        return combineLatest(reads$);\r\n      }),\r\n      map((joins) => {\r\n        return { ...data, participants: joins };\r\n      })\r\n    );\r\n  }\r\n\r\n  /** update message */\r\n  public updateMessage(message: IMessage) {\r\n    return this.firestoreService.update(`messages/${message.id}`, message);\r\n  }\r\n\r\n  /** delete message */\r\n  public deleteMessage(message: IMessage) {\r\n    return this.firestoreService.delete(`messages/${message.id}`);\r\n  }\r\n\r\n  /** delete collection of messages */\r\n  public deleteAllMessages(batch) {\r\n    return this.firestoreService.deleteCollection(`messages`, batch);\r\n  }\r\n\r\n  /** start chat with a user by first checking if a message already exists with the users id,\r\n   * if no message exists, create one,\r\n   * if message exists, navigate to chat modal\r\n   */\r\n  public async startChat(user: IUser) {\r\n\t\tlet myaccount = await this.authService.getUser();\r\n\t\tthis.firestoreService\r\n\t\t\t.colWithIds$<IMessage>('messages', (ref: any) =>\r\n\t\t\t\tref.where('participantsId', 'array-contains', user.uid)\r\n\t\t\t)\r\n\t\t\t.pipe(\r\n\t\t\t\tmap((data: IMessage[]) => {\r\n\t\t\t\t\tlet temp: IMessage[] = [];\r\n\t\t\t\t\tdata.forEach((element) => {\r\n\t\t\t\t\t\telement.participantsId.forEach((part) => {\r\n\t\t\t\t\t\t\tif (part == myaccount.uid) {\r\n\t\t\t\t\t\t\t\ttemp.push(element);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn temp;\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t\t.subscribe((data) => {\r\n\t\t\t\tconst message = data[0];\r\n\t\t\t\tif (!!message) {\r\n\t\t\t\t\tthis.goto(`${this.routes.messages}/${message.id}`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.createMessage(user);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t}\r\n  /** delete a message in chat */\r\n  public deleteChat(message: IMessage, data: IChat) {\r\n    return this.firestoreService.update(`messages/${message.id}`, {\r\n      messages: firebase.firestore.FieldValue.arrayRemove(data)\r\n    });\r\n  }\r\n\r\n  /** send a message */\r\n  public send(message: IMessage, data: IChat) {\r\n    delete message.participants;\r\n    return this.firestoreService.update(`messages/${message.id}`, {\r\n      ...message,\r\n      messages: firebase.firestore.FieldValue.arrayUnion(data)\r\n    });\r\n  }\r\n\r\n  /** create a message with participants and default messages property to empty array */\r\n  private async createMessage(user: IUser) {\r\n    const { uid } = await this.authService.getUser();\r\n    this.firestoreService.add<IMessage>('messages', {\r\n      participantsId: [user.uid, uid],\r\n      messages: [],\r\n      isArchieved: false\r\n    });\r\n  }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { CallNumber } from '@ionic-native/call-number/ngx';\r\nimport * as firebase from 'firebase/app';\r\nimport { combineLatest, of } from 'rxjs';\r\nimport { first, map, switchMap } from 'rxjs/operators';\r\nimport { IUser } from 'src/pages/auth/helpers/model';\r\nimport { AuthService } from 'src/pages/auth/services/auth/auth.service';\r\nimport { Extender } from 'src/shared/helpers/extender';\r\nimport { ITabView } from 'src/shared/helpers/models';\r\nimport { FirestoreService } from 'src/shared/services/firestore/firestore.service';\r\n\r\n/**\r\n * crud methods to interact with firebase cloud store regarding users\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PeopleService extends Extender {\r\n  public friends: string[] = [];\r\n\r\n  constructor(\r\n    protected injector: Injector,\r\n    private callNumber: CallNumber,\r\n    private authService: AuthService,\r\n    private firestoreService: FirestoreService\r\n  ) {\r\n    super(injector);\r\n  }\r\n\r\n  /** get alphabets A to Z */\r\n  public get alpha(): string[] {\r\n    const a = [];\r\n    let i = 'A'.charCodeAt(0);\r\n    const j = 'Z'.charCodeAt(0);\r\n    for (; i <= j; ++i) {\r\n      a.push(String.fromCharCode(i));\r\n    }\r\n    return a;\r\n  }\r\n\r\n  /** get tabbed views detail */\r\n  public get views(): ITabView[] {\r\n    return [\r\n      {\r\n        id: 0,\r\n        name: 'All',\r\n        active: true,\r\n        event: () => {}\r\n      },\r\n      {\r\n        id: 1,\r\n        name: 'Friends',\r\n        event: () => {}\r\n      }\r\n    ];\r\n  }\r\n\r\n  /** sort and group people by first letter of their name and return an array of letter\r\n   * and then array of users with that first letter of display name\r\n   */\r\n  public groupPeople(people: IUser[]): Array<{ letter: string; people: IUser[] }> {\r\n    const sortedContacts = people.sort((a, b) => {\r\n      return a.displayName.toLowerCase() > b.displayName.toLowerCase()\r\n        ? 1\r\n        : b.displayName.toLowerCase() > a.displayName.toLowerCase()\r\n        ? -1\r\n        : 0;\r\n    });\r\n    let currentLetter: boolean | any = false;\r\n    let currentContacts = [];\r\n    const groupedPeople = [];\r\n\r\n    sortedContacts.forEach((value: IUser) => {\r\n      if (value.displayName.charAt(0).toString() !== currentLetter) {\r\n        currentLetter = value.displayName.charAt(0);\r\n        const newGroup = {\r\n          letter: currentLetter,\r\n          people: []\r\n        };\r\n        currentContacts = newGroup.people;\r\n        groupedPeople.push(newGroup);\r\n      }\r\n      currentContacts.push(value);\r\n    });\r\n\r\n    return groupedPeople;\r\n  }\r\n\r\n  /** get users from users collection, remove current user from list */\r\n  public getPeople(uid: string) {\r\n    return this.firestoreService.colWithIds$(`users`).pipe(\r\n      map((users) => {\r\n        return users.filter((user) => user.uid !== uid);\r\n      })\r\n    );\r\n  }\r\n\r\n  /** get a single user by id and return as promise */\r\n  public getPerson(uid: string) {\r\n    return this.firestoreService\r\n      .doc$<IUser>(`users/${uid}`)\r\n      .pipe(first())\r\n      .toPromise();\r\n  }\r\n\r\n  /** get friends ids from friends collection */\r\n  public getFriendIds(uid: string) {\r\n    return this.firestoreService.doc$<any>(`friends/${uid}`).pipe(\r\n      map((friends) => {\r\n        this.friends = friends.friendIds;\r\n        return friends.friendIds;\r\n      })\r\n    );\r\n  }\r\n\r\n  /** get friends data from friends collection. friends collection only stores id so get user object for each id using switch map */\r\n  public getFriends(uid: string) {\r\n    return this.firestoreService.doc$<any>(`friends/${uid}`).pipe(\r\n      switchMap((_friend: any) => {\r\n        const reads = [];\r\n        if (_friend.friendIds.length > 0) {\r\n          _friend.friendIds.forEach((item: any) => {\r\n            reads.push(this.firestoreService.doc$(`users/${item}`));\r\n          });\r\n          return combineLatest(reads);\r\n        } else {\r\n          return of([]);\r\n        }\r\n      }),\r\n      map((friends: IUser[]) => {\r\n        return friends;\r\n      })\r\n    );\r\n  }\r\n\r\n  /** get followers ids from friends where friendsIds array contains current users uid */\r\n  public getFollowersIds(uid: string) {\r\n    return this.firestoreService\r\n      .colWithIds$<any>(`friends`, (ref) => ref.where('friendIds', 'array-contains', uid))\r\n      .pipe(\r\n        map((friends) => {\r\n          return friends;\r\n        })\r\n      );\r\n  }\r\n\r\n  /** get followers data from friends where friendsIds array contains current users uid\r\n   * friends collection only stores id so get user object for each id using switch map\r\n   */\r\n  public getFollowers(uid: string) {\r\n    return this.firestoreService\r\n      .colWithIds$<any>(`friends`, (ref) => ref.where('friendIds', 'array-contains', uid))\r\n      .pipe(\r\n        switchMap((_friend: any) => {\r\n          const reads = [];\r\n          if (_friend.length > 0) {\r\n            _friend.forEach((item: any) => {\r\n              reads.push(this.firestoreService.doc$(`users/${item.id}`));\r\n            });\r\n            return combineLatest(reads);\r\n          } else {\r\n            return of([]);\r\n          }\r\n        }),\r\n        map((friends: IUser[]) => {\r\n          return friends;\r\n        })\r\n      );\r\n  }\r\n\r\n  /** follow user by creating/updating friendsIds in friends collection */\r\n  public async follow(fid: string) {\r\n    const { uid } = await this.authService.getUser();\r\n    return await this.firestoreService.set<IUser>(`friends/${uid}`, {\r\n      friendIds: firebase.firestore.FieldValue.arrayUnion(fid)\r\n    });\r\n  }\r\n\r\n  /** unfollow user by removing friendsIds in friends collection */\r\n  public async unfollow(fid: string) {\r\n    const { uid } = await this.authService.getUser();\r\n    return await this.firestoreService.update(`friends/${uid}`, {\r\n      friendIds: firebase.firestore.FieldValue.arrayRemove(fid)\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}